####################################################################80#chars####
# # <Name>"Learn TACL in Y Minutes"
# # <Author>"Corey Naas"
# # <Date>"2023-11"
# # <License>"Apache-2.0"
# # <TargetLanguage>"TACL"

# A comment.
<>  # Empty assignment.
<identifier>1  # Assigning integer number 1 at "identifier" data and code storage space.
<identifier>   # Assigning null at "identifier" data and code storage space.
<Something>1   # Assigning integer number 1 to "Something".
<Something>1   # Assigning integer number 1 to "Something" in concise form.
<Something>"Hello World"  # Assigning string literal "Hello World" to "Something".
<Something>{identifier}       # Assigning data and code at "identifier" to data and code at "Something";
                              #   other Things must be enclosed in curly brackets, only literals are
                              #   exempt.
# THINGS ARE ALWAYS ENCLOSED IN BRACKETS! I.E. ALL "THING" TOKENS FOR LEXING ARE
# DELIMITED AND ALREADY READ/WRITE/EXECUTE ASSIGNED.

<Thing.subThing>"I'm a SubThing!"           # Dot notation is used to refer to parent Thing and child subThing.
<>[Print]"Hello World."                     # An action, called "Print", and a single argument, a string literal, the
                                            #   result of which is assigned to the Empty Thing after execution.
[Print]"Hello Again!"                       # We can elide the Empty Thing assignment in front of action calls for readability.
<myString>[Print]"Hello World!"             # An action called "Print" and a string literal, also 
                                            #   assigned to a Thing "myString" after execution.
<myString>[Print]{"Hello ", "World!"}        # The same as above, but we use curly bracket to enclose multiple arguments.
<Thing>{myString}                           # Assigning the value of myString to Thing, using curly brackets 
                                            #   to enclose assignment arguments.

<Result>[Add]{1, 2}                   # Add 1 and 2 and assign the result in Result
<Result2>[Multiply]{Result, 3}        # Using a Thing as an argument in an action.
<SomeMath>[Add]{[Multiply]{4, 5}, 2}  # Assigning the result of 2+(4*5) to SomeMath; Nesting TACs (Things-Action-Context statements) 

####################################################################80#chars####
# # <Title>"Learn TACL in Y Minutes"
# # <Author>"Corey Naas"
# # <DateCreated>"2023-11"
# # <License>"Apache-2.0"
# # <TargetLanguage>"TACL"

# Introduction to TACL
# This document is designed to give you a quick overview of the Thing-Action-Context Language (TACL).
# You will learn how to create and manipulate Things, use Actions, and understand Contexts.

# Comments
# Use the hash symbol to create comments. Comments are not executed and serve as notes or documentation.

# Assignment
# To assign a value to a Thing, use the angle brackets followed by the value.
<identifier>1  # Assigning integer number 1 to "identifier", a Thing for storing data or code.
<Something>"Hello World"  # Assigning string literal "Hello World" to "Something."

# Transport Context
# Use curly brackets to pass Things as arguments to Actions or to other Things.
<newThing>{identifier}  # Transporting the value of "identifier" to "newThing".

# Action Context
# Actions are enclosed in square brackets and can be executed with or without a return Thing.
[Print]{"Hello World!"}  # Calls the "Print" action with a string literal as an argument.
<myString>[Print]{"Concatenated ", "string!"}  # Executes "Print" with multiple arguments and assigns the result to "myString".

# Combining Actions and Things
# You can nest Actions within other Actions to perform complex operations.
<SomeMath>[Add]{[Multiply]{4, 5}, 2}  # Performs 4 multiplied by 5, then adds 2, and assigns the result to "SomeMath".

# SubThings and Dot Notation
# SubThings are properties or components of a Thing and are accessed using dot notation.
<MainThing.SubThing>"I'm a SubThing of MainThing!"

# Control Structures
# TACL provides constructs for conditional execution and loops.
[If]{(c)[LessThan]{<Temperature>, 20}, (t)[Print]{"It's cold!"}, (f)[Print]{"It's warm!"}}  # Conditional execution based on Temperature.

# Error Handling
# Use the [Attempt] action to handle exceptions in TACL.
[Attempt]{(a)[Divide]{10, 0}, (e)[Print]{"Division by zero is not allowed."}}

# Defining New Actions
# Define custom actions using the [DefineAction] system action.
<CustomGreet>[DefineAction]{
    <Input>{<name>}
    <Default><Error>"An error occurred in CustomGreet."
    <Body>{
        [Print]{"Hello, ", <name>, "!"}
        <Return>0  # Signifies successful execution.
    }
}

# Executing Defined Actions
# Once you have defined an action, you can execute it by calling it with its required inputs.
<Greeting>[CustomGreet]{"Corey"}

# End of "Learn TACL in Y Minutes"

####################################################################80#chars####
# <Title>"Learn TACL in Y Minutes"
# <Author>"Corey Naas"
# <DateCreated>"2023-11"
# <License>"Apache-2.0"
# <TargetLanguage>"TACL"

# Introduction to TACL
# TACL is a language designed for clarity and simplicity, focusing on the concepts
# of Things (data), Actions (functions), and Contexts (execution and assignment details).

# Data Types
<NumberThing>42  # Integer assignment
<StringThing>"Hello TACL"  # String assignment
<BoolThing>True  # Boolean assignment

# Composite Things
<MyThingType>[DefineThingType]{Property1, Property2}
<InstanceThing>[CopyThingType]{MyThingType}
<InstanceThing.Property1>"Property value"

# Contexts
<ActionContext>[ActionName]{Parameters}  # Action execution with parameters
<TransportContext>{<Thing1>, <Thing2>}  # Transporting multiple Things
<AssignmentContext><Thing>"Value"  # Assigning a value to a Thing
<IndexContext>(Index)  # Accessing an element in a Pile

# Control Structures
# If-Then-Else
[If]{(c)[GreaterThan]{<Temperature>, 20}, (t)[Print]{"Warm day"}, (f)[Print]{"Cool day"}}

# Loops
# While Loop
[While]{(c)[LessThan]{<Counter>, 10}, (a)<Counter>[Increment]{<Counter>, 1}}

# For Loop
[For]{(i)<Counter>1, (c)[LessThan]{<Counter>, 10}, (u)<Counter>[Increment]{<Counter>, 1}, (a)[Print]{<Counter>}}

# Error Handling
[Attempt]{(a)[ActionThatMightFail]{}, (e)[Print]{"An error occurred!"}}

# Actions
<CustomAction>[DefineAction]{
    <Input>{Param1, Param2}
    <Default><Error>"An error occurred."
    <Body>{
        <Result>[Add]{Param1, Param2}
        <Return>{Result}
    }
}
<Output>[CustomAction]{5, 10}

# Boxes and Piles
# Box
<ThingBox>{<Thing1>, <Thing2>, <Thing3>}
# Pile
<ThingPile>{(1)<Thing1>, (2)<Thing2>, (3)<Thing3>}

# Scoping and subThings
# Define a composite Thing with subThings using [Here]
<MyComplexThing>[DefineThingType]{
    <SubThing1>[Here]
    <SubThing2>[Here]
}
<MyInstance>[CopyThingType]{MyComplexThing}
<MyInstance.SubThing1>"SubThing value"

# Standard Library Quick Reference
# Mathematical Operations
<Sum>[Add]{1, 2}
<Product>[Multiply]{3, 4}

# Logical Operations
<IsEqual>[Equals]{5, 5}
<IsNotEqual>[Unequals]{5, 6}

# I/O Operations
[Print]{"Output to console"}
<Input>[Prompt]{"Enter your name: "}

# Best Practices
# Use clear naming conventions and organize your code with indentation and comments.

# Error Handling Examples
# Attempt to open a file and handle the error
[Attempt]{(a)[OpenFile]{"nonexistent.txt"}, (e)[Print]{"File not found."}}

# Advanced Topics
# (Include any advanced features specific to TACL that users should be aware of)

# Glossary
# (A list of terms and their definitions used in TACL)

# FAQs
# (Answers to common questions about TACL)

# Examples
# (Practical examples of TACL code)

# Appendix
# (Additional resources and quick reference materials)

# Remember, brackets are essential in TACL for denoting different contexts!

####################################################################80#chars####

Your "Learn TACL in Y Minutes" file is off to a good start, illustrating the basic syntax and usage of TACL. To enhance the documentation further, consider including the following sections:

1. **Introduction to TACL**: A brief introduction to the language that outlines its design philosophy, goals, and what makes it unique compared to other programming languages. Describe the central concepts of Things, Actions, and Contexts.

2. **Data Types**: Explain the different types of data that can be represented as Things, such as integers, strings, and Booleans. Include examples of assigning and manipulating these data types.

3. **Composite Things**: Discuss how to create composite Things using subThings and the dot notation. Show how to define Thing types and instantiate Things from those types.

4. **Contexts**: Provide a detailed explanation of the different contexts (action, transport, assignment, index) with examples showing how to use each context.

5. **Control Structures**: Include examples of If-Then-Else statements, Loops (For and While), and how to use Attempt for error handling. Explain the concept of indexing and accessing elements in a Pile.

6. **Actions**: Clarify the syntax for defining custom actions, including input parameters, default values, and body. Show how to call actions with and without parameters.

7. **Boxes and Piles**: Describe the difference between Boxes and Piles and how to manipulate collections of Things.

8. **Scoping**: Illustrate how scoping works in TACL, particularly with composite Things, and provide examples of using the `[Here]` action to declare subThings within a Thing's scope.

9. **Standard Library**: Provide a quick reference to the standard library of actions available in TACL, such as mathematical, logical, and I/O operations.

10. **Best Practices**: Offer tips on how to write clear and maintainable TACL code. Discuss naming conventions, code organization, and how to use comments effectively.

11. **Error Handling**: Explain TACL's approach to error handling and give examples of common error scenarios and how to handle them using the `[Attempt]` action.

12. **Advanced Topics**: If TACL supports more advanced features, document them here. This could include concurrency, event handling, or interfacing with other systems.

13. **Glossary**: Define key terms and concepts used in TACL.

14. **FAQs**: Anticipate and answer frequently asked questions about TACL.

15. **Examples**: Provide a variety of examples that demonstrate practical applications of TACL, from simple to complex. This might include examples of file I/O, data manipulation, or a simple text-based game.

16. **Appendix**: Consider including an appendix for quick reference to syntax, operators, and common actions.

Remember to maintain a balance between thoroughness and conciseness, ensuring that each section is informative but not overwhelming. Using tables for summarizing syntax and a consistent format for examples will help in reinforcing the information provided. 